#!/bin/bash

echo "๐ผ๏ธ  ุชูุฑูุฑ ุดุงูู ุนู ุตูุฑ ุงููุดุงุฑูุน ุงูุฌุฏูุฏุฉ"
echo "=========================================="
echo ""

echo "๐ ุฅุญุตุงุฆูุงุช ุนุงูุฉ:"
echo "=================="
node -e "
const { PrismaClient } = require('@prisma/client');
const prisma = new PrismaClient();

async function analyzeImages() {
  try {
    const projects = await prisma.project.findMany({
      select: {
        titleAr: true,
        image: true,
        category: true
      }
    });
    
    console.log('ุฅุฌูุงูู ุงููุดุงุฑูุน:', projects.length);
    
    let realImages = 0;
    let fallbackImages = 0;
    let pexelsImages = 0;
    
    const categoryStats = {};
    
    projects.forEach(project => {
      // ุฅุญุตุงุฆูุงุช ุงููุฆุงุช
      if (!categoryStats[project.category]) {
        categoryStats[project.category] = { count: 0, realImages: 0 };
      }
      categoryStats[project.category].count++;
      
      // ุฅุญุตุงุฆูุงุช ุงูุตูุฑ
      if (project.image) {
        if (project.image.includes('pexels.com')) {
          pexelsImages++;
          realImages++;
          categoryStats[project.category].realImages++;
        } else if (project.image.includes('project-defaults')) {
          fallbackImages++;
        } else {
          realImages++;
          categoryStats[project.category].realImages++;
        }
      }
    });
    
    console.log('ูุดุงุฑูุน ุจุตูุฑ ุญููููุฉ:', realImages);
    console.log('ูุดุงุฑูุน ูู Pexels:', pexelsImages);
    console.log('ูุดุงุฑูุน ุจุตูุฑ ุงูุชุฑุงุถูุฉ:', fallbackImages);
    console.log('');
    
    console.log('๐ ุฅุญุตุงุฆูุงุช ุงููุฆุงุช:');
    console.log('===================');
    Object.entries(categoryStats).forEach(([category, stats]) => {
      const percentage = ((stats.realImages / stats.count) * 100).toFixed(1);
      console.log(\`\${category}: \${stats.count} ูุดุฑูุน (\${stats.realImages} ุจุตูุฑ ุญููููุฉ - \${percentage}%)\`);
    });
    
    await prisma.\$disconnect();
  } catch (error) {
    console.error('ุฎุทุฃ:', error);
    await prisma.\$disconnect();
  }
}

analyzeImages();
"

echo ""
echo "๐ ูุตุงุฏุฑ ุงูุตูุฑ:"
echo "==============="
echo "โ Pexels.com - ูุฌุชูุน ุงููุตูุฑูู ุงูุนุงููููู"
echo "โ ุตูุฑ ุนุงููุฉ ุงูุฌูุฏุฉ ููุฌุงููุฉ ุชูุงูุงู"
echo "โ ุชุฑุฎูุต ูุฌุงูู ููุงุณุชุฎุฏุงู ุงูุชุฌุงุฑู"
echo "โ ูุญุณูุฉ ููููุจ (800x600 ุจูุณู)"
echo "โ ุถุบุท ุชููุงุฆู ููุฃุฏุงุก ุงูุฃูุถู"
echo ""

echo "๐จ ูุฆุงุช ุงูุตูุฑ ุงููุชุฎุตุตุฉ:"
echo "========================"
echo "๐ Web Development - ุชุทููุฑ ุงูููุงูุน"
echo "๐ฑ Mobile Apps - ุชุทุจููุงุช ุงูุฌูุงู"
echo "๐ค AI/ML Projects - ูุดุงุฑูุน ุงูุฐูุงุก ุงูุงุตุทูุงุนู"
echo "๐ข ERP Systems - ุฃูุธูุฉ ุฅุฏุงุฑุฉ ุงูููุงุฑุฏ"
echo "๐ฅ CRM Systems - ุฃูุธูุฉ ุฅุฏุงุฑุฉ ุงูุนููุงุก"
echo "๐ E-commerce - ุงูุชุฌุงุฑุฉ ุงูุฅููุชุฑูููุฉ"
echo "๐ฝ๏ธ Restaurant - ุงููุทุงุนู ูุงูุฃุบุฐูุฉ"
echo "โ๏ธ SaaS Platforms - ููุตุงุช ุงูุจุฑูุฌูุงุช ูุฎุฏูุฉ"
echo "๐ Startup Projects - ูุดุงุฑูุน ุงูุดุฑูุงุช ุงููุงุดุฆุฉ"
echo ""

echo "๐ ุงุฎุชุจุฑ ุงููุชุงุฆุฌ ุนูู:"
echo "http://localhost:3000/ar/projects"
echo ""

echo "โจ ุชู ุงุณุชูุฑุงุฏ ุตูุฑ ุงุญุชุฑุงููุฉ ูู ููุงูุน ุนุงูููุฉ!"
